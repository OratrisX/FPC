from __future__ import annotations
from typing import TYPE_CHECKING

import FunPayAPI.types
from FunPayAPI.common.enums import MessageTypes, OrderStatuses
from FunPayAPI.updater.events import NewMessageEvent

if TYPE_CHECKING:
    from cardinal import Cardinal
from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B
from tg_bot import CBT, static_keyboards as skb, utils
from locales.localizer import Localizer
from FunPayAPI.updater import events
from logging import getLogger
from threading import Thread
import telebot
import time
import json
import os

NAME = "Chat Sync Plugin"
VERSION = "0.0.9"
DESCRIPTION = "–ü–ª–∞–≥–∏–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—â–∏–π FunPay —á–∞—Ç—ã —Å Telegram —á–∞—Ç–æ–º (—Ñ–æ—Ä—É–º–æ–º).\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—É—é —Ç–µ–º—É - –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –Ω—É–∂–Ω—ã–π FunPay —á–∞—Ç! –ò –Ω–∞–æ–±–æ—Ä–æ—Ç!"
CREDITS = "@woopertail, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ FP, —Ñ–∏–∫—Å—ã, –æ–±–Ω–æ–≤—ã - @sidor0912"
UUID = "745ed27e-3196-47c3-9483-e382c09fd2d8"
SETTINGS_PAGE = True
PLUGIN_FOLDER = f"storage/plugins/{UUID}/"

SPECIAL_SYMBOL = "‚Å¢"
MIN_BOTS = 4
BOT_DELAY = 4
LOGGER_PREFIX = "[CHAT SYNC PLUGIN]"
logger = getLogger("FPC.shat_sync")


localizer = Localizer()
_ = localizer.translate


# CALLBACKS
EDIT_SYNC_BOT = "sync_plugin.edit_bot"
ADD_SYNC_BOT = "sync_plugin.add_bot"
DELETE_SYNC_BOT = "sync_plugin.delete_bot"
SETUP_SYNC_CHAT = "sync_plugin.setup_chat"
DELETE_SYNC_CHAT = "sync_plugin.delete_chat"
PLUGIN_NO_BUTTON = "sunc_plugin.no"


# KEYBOARDS
def plugin_settings_kb(cs: ChatSync, offset: int) -> K:
    kb = K()
    for index, bot in enumerate(cs.bots):
        try:
            name = "@" + bot.get_me().username
        except:
            name = bot.token
        kb.row(B(name, callback_data=f"{EDIT_SYNC_BOT}:{index}:{offset}"),
               B("üóëÔ∏è", callback_data=f"{DELETE_SYNC_BOT}:{index}:{offset}"))
    kb.add(B("‚ûï –î–æ–±–∞–≤–∏—Ç—å Telegram –±–æ—Ç–∞", callback_data=f"{ADD_SYNC_BOT}:{offset}"))
    kb.add(B(_("gl_back"), callback_data=f"{CBT.EDIT_PLUGIN}:{UUID}:{offset}"))
    return kb


def back_keyboard(offset: int) -> K:
    return K().add(B(_("gl_back"), callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:{offset}"))


def setup_chat_keyboard() -> K:
    return K().row(B(_("gl_yes"), callback_data=SETUP_SYNC_CHAT),
                   B(_("gl_no"), callback_data=PLUGIN_NO_BUTTON))


def delete_chat_keyboard() -> K:
    return K().row(B(_("gl_yes"), callback_data=DELETE_SYNC_CHAT),
                   B(_("gl_no"), callback_data=PLUGIN_NO_BUTTON))


class ChatSync:
    def __init__(self, crd: Cardinal):
        self.cardinal = crd
        self.settings: dict | None = None
        self.threads: dict | None = None
        self.bots: list[telebot.TeleBot] | None = None
        self.current_bot: telebot.TeleBot | None = None
        self.initialized = False  # –ë–æ—Ç—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–æ–ø–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑ –æ—à–∏–±–æ–∫.
        self.ready = False  # –í—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ–±–ª—é–¥–µ–Ω—ã (–ø—Ä–∏–≤—è–∑–∞–Ω —á–∞—Ç, –±–æ—Ç–æ–≤ 3 –∏–ª–∏ –±–æ–ª—å—à–µ).
        self.plugin_uuid = UUID
        self.tg = None
        self.tgbot = None
        if self.cardinal.telegram:
            self.tg = self.cardinal.telegram
            self.tgbot = self.tg.bot

        self.notification_last_stack_id = ""
        self.attributation_last_stack_id = ""
        self.sync_chats_running = False
        self.full_history_running = False
        self.init_chat_synced = False

        setattr(ChatSync.send_message, "plugin_uuid", UUID)
        setattr(ChatSync.ingoing_message_handler, "plugin_uuid", UUID)
        setattr(ChatSync.sync_chat_on_start_handler, "plugin_uuid", UUID)
        setattr(ChatSync.setup_event_attributes, "plugin_uuid", UUID)

    def load_settings(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞.
        """
        if not os.path.exists(os.path.join(PLUGIN_FOLDER, "settings.json")):
            logger.warning(f"{LOGGER_PREFIX} –§–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            self.settings = {"chat_id": None}
        else:
            with open(os.path.join(PLUGIN_FOLDER, "settings.json"), "r", encoding="utf-8") as f:
                self.settings = json.loads(f.read())
            logger.info(f"{LOGGER_PREFIX} –ó–∞–≥—Ä—É–∑–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

    def load_threads(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Telegram-—Ç–æ–ø–∏–∫–æ–≤.
        """
        if not os.path.exists(os.path.join(PLUGIN_FOLDER, "threads.json")):
            logger.warning(f"{LOGGER_PREFIX} –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ Telegram —Ç–æ–ø–∏–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            self.threads = {}
        else:
            with open(os.path.join(PLUGIN_FOLDER, "threads.json"), "r", encoding="utf-8") as f:
                self.threads = json.loads(f.read())
            logger.info(f"{LOGGER_PREFIX} –ó–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ –æ Telegram —Ç–æ–ø–∏–∫–∞—Ö.")

    def load_bots(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –±–æ—Ç–æ–≤.
        """
        if not os.path.exists(os.path.join(PLUGIN_FOLDER, "bots.json")):
            logger.warning(f"{LOGGER_PREFIX} –§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏ Telegram-–±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            self.bots = []
            return

        with open(os.path.join(PLUGIN_FOLDER, "bots.json"), "r", encoding="utf-8") as f:
            tokens = json.loads(f.read())

        bots = []
        for i in tokens:
            bot = telebot.TeleBot(i, parse_mode="HTML", allow_sending_without_reply=True)
            try:
                data = bot.get_me()
                if not data:
                    continue
                logger.info(f"{LOGGER_PREFIX} –ë–æ—Ç @{data.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                bots.append(bot)
            except:
                logger.error(
                    f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º $YELLOW{i}$RESET.")
                logger.debug("TRACEBACK", exc_info=True)

        logger.info(f"{LOGGER_PREFIX} –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë–æ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: $YELLOW{len(bots)}$RESET.")
        self.bots = bots
        self.current_bot = self.bots[0] if self.bots else None

    def save_threads(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç Telegram-—Ç–æ–ø–∏–∫–∏.
        """
        if not os.path.exists(PLUGIN_FOLDER):
            os.makedirs(PLUGIN_FOLDER)
        with open(os.path.join(PLUGIN_FOLDER, "threads.json"), "w", encoding="utf-8") as f:
            f.write(json.dumps(self.threads))

    def save_settings(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
        """
        if not os.path.exists(PLUGIN_FOLDER):
            os.makedirs(PLUGIN_FOLDER)
        with open(os.path.join(PLUGIN_FOLDER, "settings.json"), "w", encoding="utf-8") as f:
            f.write(json.dumps(self.settings))

    def save_bots(self):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤.
        """
        if not os.path.exists(PLUGIN_FOLDER):
            os.makedirs(PLUGIN_FOLDER)
        with open(os.path.join(PLUGIN_FOLDER, "bots.json"), "w", encoding="utf-8") as f:
            data = [i.token for i in self.bots]
            f.write(json.dumps(data, ensure_ascii=False))

    def swap_curr_bot(self):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ.
        """
        if not self.current_bot and not self.bots:
            return
        try:
            self.current_bot = self.bots[self.bots.index(self.current_bot) + 1]
        except IndexError:
            self.current_bot = self.bots[0]

    def is_outgoing_message(self, m: telebot.types.Message) -> bool:
        if self.settings["chat_id"] and m.chat.id == self.settings["chat_id"] and \
                m.reply_to_message and m.reply_to_message.forum_topic_created:
            if m.entities:
                for i in m.entities:
                    if i.type == "bot_command" and i.offset == 0:
                        return False
            return True
        return False

    def new_synced_chat(self, chat_id: int, chat_name: str) -> bool:
        try:
            topic = self.current_bot.create_forum_topic(self.settings["chat_id"], f"{chat_name} ({chat_id})",
                                                        icon_custom_emoji_id="5417915203100613993")
            self.swap_curr_bot()
            self.threads[str(chat_id)] = topic.message_thread_id
            self.save_threads()
            logger.info(f"{LOGGER_PREFIX} FunPay —á–∞—Ç $YELLOW{chat_name} (CID: {chat_id})$RESET —Å–≤—è–∑–∞–Ω —Å Telegram —Ç–µ–º–æ–π $YELLOW{topic.message_thread_id}$RESET.")
            try:
                self.current_bot.send_message(self.settings["chat_id"], f"<a href='https://funpay.com/chat/?node={chat_id}'>{chat_name}</a>", message_thread_id=topic.message_thread_id)
                self.swap_curr_bot()
            except:
                logger.error(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞.")
                logger.debug("TRACEBACK", exc_info=True)

            return True
        except:
            logger.error(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ FunPay —á–∞—Ç–∞ —Å Telegram —Ç–µ–º–æ–π.")
            logger.debug("TRACEBACK", exc_info=True)
            return False

    # HANDLERS
    # pre init
    def load(self):
        try:
            self.load_settings()
            self.load_threads()
            self.load_bots()
        except:
            logger.error(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞.")
            logger.debug("TRACEBACK", exc_info=True)
            return
        logger.info(f"{LOGGER_PREFIX} –ü–ª–∞–≥–∏–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        self.initialized = True

        if self.settings["chat_id"] and len(self.bots) >= MIN_BOTS:
            self.ready = True

    def setup_event_attributes(self, c: Cardinal, e: events.NewMessageEvent):
        if e.stack.id() == self.attributation_last_stack_id:
            return
        self.attributation_last_stack_id = e.stack.id()
        for event in e.stack.get_stack():
            if event.message.text and event.message.text.startswith(SPECIAL_SYMBOL):
                event.message.text = event.message.text.replace(SPECIAL_SYMBOL, "")
                setattr(event, "sync_ignore", True)

    def replace_handler(self):
        if not self.initialized:
            return
        for index, handler in enumerate(self.cardinal.new_message_handlers):
            if handler.__name__ == "send_new_msg_notification_handler":
                break
        self.cardinal.new_message_handlers.insert(index, self.ingoing_message_handler)
        self.cardinal.new_message_handlers.insert(0, self.setup_event_attributes)
        self.cardinal.init_message_handlers.append(self.sync_chat_on_start_handler)

    def bind_tg_handlers(self):
        if not self.initialized:
            return

        self.tg.cbq_handler(self.open_settings_menu, lambda c: c.data.startswith(f"{CBT.PLUGIN_SETTINGS}:{UUID}:"))
        self.tg.cbq_handler(self.act_add_sync_bot, lambda c: c.data.startswith(ADD_SYNC_BOT))
        self.tg.cbq_handler(self.delete_sync_bot, lambda c: c.data.startswith(DELETE_SYNC_BOT))
        self.tg.cbq_handler(self.confirm_setup_sync_chat, lambda c: c.data == SETUP_SYNC_CHAT)
        self.tg.cbq_handler(self.confirm_delete_sync_chat, lambda c: c.data == DELETE_SYNC_CHAT)
        self.tg.cbq_handler(self.no, lambda c: c.data == PLUGIN_NO_BUTTON)
        self.tg.msg_handler(self.add_sync_bot, func=lambda m: self.tg.check_state(m.chat.id, m.from_user.id, ADD_SYNC_BOT))
        self.tg.msg_handler(self.send_funpay_image, content_types=["photo"], func=lambda m: self.is_outgoing_message(m))
        self.tg.msg_handler(self.send_message, func=lambda m: self.is_outgoing_message(m))
        self.tg.msg_handler(self.setup_sync_chat, commands=["setup_sync_chat"])
        self.tg.msg_handler(self.delete_sync_chat, commands=["delete_sync_chat"])
        self.tg.msg_handler(self.sync_chats, commands=["sync_chats"])
        self.tg.msg_handler(self.watch_handler, commands=["watch"])
        self.tg.msg_handler(self.history_handler, commands=["history"])
        self.tg.msg_handler(self.full_history_handler, commands=["full_history"])

        self.cardinal.add_telegram_commands(UUID, [
            ("setup_sync_chat", "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", True),
            ("delete_sync_chat", "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", True),
            ("sync_chats", "–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Ç–æ–≤", True),
            ("watch", "–ß—Ç–æ —Å–µ–π—á–∞—Å —Å–º–æ—Ç—Ä–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?", True),
            ("history", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 25 —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞", True),
            ("full_history", "–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞", True)
        ])

    # new message
    def ingoing_message(self, c: Cardinal, e: events.NewMessageEvent):
        chat_id, chat_name = e.message.chat_id, e.message.chat_name
        if str(chat_id) not in self.threads:
            if not self.new_synced_chat(chat_id, chat_name):
                return

        events_list = [e for e in e.stack.get_stack() if not hasattr(e, "sync_ignore")]
        if not events_list:
            return
        tags = " ".join([f"<a href='tg://user?id={i}'>{SPECIAL_SYMBOL}</a>" for i in c.telegram.authorized_users])
        thread_id = self.threads[str(chat_id)]
        text = ""
        last_message_author_id = -1
        last_by_bot = False
        last_badge = None

        for i in events_list:
            def edit_icon_and_topic_name(c: Cardinal, e: events.NewMessageEvent):
                try:
                    str4topic = ""
                    if e.message.type not in (MessageTypes.REFUND, MessageTypes.PARTIAL_REFUND,
                                              MessageTypes.ORDER_PURCHASED, MessageTypes.ORDER_CONFIRMED,
                                              MessageTypes.ORDER_CONFIRMED_BY_ADMIN) :
                        return
                    else:
                        logger.debug(f"{LOGGER_PREFIX} –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏: {e.message.text}")
                    sells = []
                    start_from = None
                    while (True):
                        start_from, sells_temp = c.account.get_sells(buyer=chat_name, start_from=start_from)
                        sells.extend(sells_temp)
                        if start_from is None:
                            break
                        time.sleep(1)
                    paid = 0
                    refunded = 0
                    closed = 0
                    paid_sum = {}
                    refunded_sum = {}
                    closed_sum = {}
                    for sale in sells:
                        if sale.status == OrderStatuses.REFUNDED:
                            refunded += 1
                            refunded_sum[sale.currency] = refunded_sum.get(sale.currency, 0) + sale.price
                        elif sale.status == OrderStatuses.PAID:
                            paid += 1
                            paid_sum[sale.currency] = paid_sum.get(sale.currency, 0) + sale.price
                        elif sale.status == OrderStatuses.CLOSED:
                            closed += 1
                            closed_sum[sale.currency] = closed_sum.get(sale.currency, 0) + sale.price
                    paid_sum = ", ".join(sorted([f"{v}{k}" for k, v in paid_sum.items()],key=lambda x: x[-1]))
                    refunded_sum = ", ".join(sorted([f"{v}{k}" for k, v in refunded_sum.items()], key=lambda x: x[-1]))
                    closed_sum = ", ".join(sorted([f"{v}{k}" for k, v in closed_sum.items()], key=lambda x: x[-1]))
                    if paid:
                        icon_custom_emoji_id = "5431492767249342908"
                    elif closed:
                        icon_custom_emoji_id = "5350452584119279096"
                    elif refunded:
                        icon_custom_emoji_id = "5312424913615723286"
                    else:
                        icon_custom_emoji_id = "5417915203100613993"
                    str4topic = f"{paid}|{closed}|{refunded}üë§{chat_name} ({chat_id})"
                    self.current_bot.edit_forum_topic(name=str4topic,
                                                      chat_id=self.settings["chat_id"], message_thread_id=thread_id,
                                                      icon_custom_emoji_id=icon_custom_emoji_id)
                    logger.debug(f"{LOGGER_PREFIX} –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏/–Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞ {thread_id} –Ω–∞ {str4topic} —É—Å–ø–µ—à–Ω–æ.")
                    self.swap_curr_bot()
                    txt4tg = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{chat_name}</b>\n\n" \
                             f"<b>üõí–û–ø–ª–∞—á–µ–Ω:</b> <code>{paid}</code> {'(<code>'+paid_sum+'</code>)' if paid_sum else ''}\n" \
                             f"<b>üèÅ–ó–∞–∫—Ä—ã—Ç:</b> <code>{closed}</code> {'(<code>'+closed_sum+'</code>)' if closed_sum else ''}\n" \
                             f"<b>üîô–í–æ–∑–≤—Ä–∞—Ç:</b> <code>{refunded}</code> {'(<code>'+refunded_sum+'</code>)' if refunded_sum else ''}"
                    self.current_bot.send_message(self.settings["chat_id"], txt4tg, message_thread_id=thread_id)
                    self.swap_curr_bot()

                except:
                    logger.error(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏/–Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞ {thread_id} –Ω–∞ {str4topic}")
                    logger.debug("TRACEBACK", exc_info=True)
            edit_icon_and_topic_name(c, i)
            message_text = str(i.message)
            if i.message.author_id == last_message_author_id and i.message.by_bot == last_by_bot \
                    and i.message.badge == last_badge and text != "":
                author = ""
            elif i.message.author_id == c.account.id:
                author = f"<i><b>ü§ñ {_('you')} (<i>FPC</i>):</b></i> " if i.message.by_bot else f"<i><b>ü´µ {_('you')}:</b></i> "
                if i.message.badge:
                    author = f"<i><b>üì¶ {_('you')} ({i.message.badge}):</b></i> "
            elif i.message.author_id == 0:
                author = f"<i><b>üîµ {i.message.author}: </b></i>"                
            elif i.message.badge:
                author = f"<i><b>üÜò {i.message.author} ({i.message.badge}): </b></i>"
            elif i.message.author == i.message.chat_name:
                author = f"<i><b>üë§ {i.message.author}: </b></i>"
            else:
                author = f"<i><b>üÜò {i.message.author} {_('support')}: </b></i>"

            if not i.message.text:
                msg_text = f"<a href=\"{message_text}\">{_('photo')}</a>"
            elif i.message.author_id == 0:
                msg_text = f"<b><i>{utils.escape(message_text)}</i></b>"
            else:
                msg_text = utils.escape(message_text)

            text += f"{author}{msg_text}\n\n"
            last_message_author_id = i.message.author_id
            last_by_bot = i.message.by_bot
            last_badge = i.message.badge
            if not i.message.text:
                try:

                    text = f"<a href=\"{message_text}\">{SPECIAL_SYMBOL}</a>" + text
                    self.current_bot.send_message(self.settings["chat_id"], text.rstrip()+tags, message_thread_id=thread_id)
                    self.swap_curr_bot()
                    text = ""                

                except:
                    logger.error(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —á–∞—Ç.")
                    logger.debug("TRACEBACK", exc_info=True)
        if text:
            try:
                self.current_bot.send_message(self.settings["chat_id"], text.rstrip()+tags, message_thread_id=thread_id)
                self.swap_curr_bot()
            except:
                logger.error(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —á–∞—Ç.")
                logger.debug("TRACEBACK", exc_info=True)

    def ingoing_message_handler(self, c: Cardinal, e: events.NewMessageEvent):
        if not self.ready:
            return
        if e.stack.id() == self.notification_last_stack_id:
            return
        self.notification_last_stack_id = e.stack.id()
        Thread(target=self.ingoing_message, args=(c, e), daemon=True).start()

    # init message
    def sync_chat_on_start(self, c: Cardinal):
        chats = c.account.get_chats()
        self.sync_chats_running = True
        for i in chats:
            chat = chats[i]
            if str(i) in self.threads:
                continue
            self.new_synced_chat(chat.id, chat.name)
            time.sleep(BOT_DELAY / len(self.bots))
        self.sync_chats_running = False

    def sync_chat_on_start_handler(self, c: Cardinal, e: events.InitialChatEvent):
        if self.init_chat_synced or not self.ready:
            return
        self.init_chat_synced = True
        Thread(target=self.sync_chat_on_start, args=(c,), daemon=True).start()

    # TELEGRAM
    def no(self, c: telebot.types.CallbackQuery):
        self.tgbot.delete_message(c.message.chat.id, c.message.id)

    def open_settings_menu(self, c: telebot.types.CallbackQuery):
        """
        –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–∞.
        """
        split = c.data.split(":")
        uuid, offset = split[1], int(split[2])
        try:
            chat_name = self.tgbot.get_chat(self.settings["chat_id"])
            if not chat_name:
                chat_name = None
            elif chat_name.username:
                chat_name = f"@{chat_name.username}"
            elif chat_name.invite_link:
                chat_name = chat_name.invite_link
            else:
                chat_name = f"<code>{self.settings['chat_id']}</code>"
        except:
            chat_name = None

        instructions = "–í—Å–µ –≥–æ—Ç–æ–≤–æ! –ü–ª–∞–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç, –±–æ–ª—å—à–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ :)"
        if len(self.bots) < MIN_BOTS:
            instructions = f"–°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å {MIN_BOTS - len(self.bots)} –±–æ—Ç–∞(-–æ–≤) –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —Ç–æ–∫–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>–î–æ–±–∞–≤–∏—Ç—å Telegram –±–æ—Ç–∞</code>.\n\n" \
                           f"–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ–ø–∏—à–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–¥–µ–ª–∞–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏."
        elif not self.settings.get('chat_id'):
            instructions = f"–°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É, –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ–µ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ (—ç—Ç–æ–≥–æ) –±–æ—Ç–∞) –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∞–º–∏.\n\n" \
                           f"–î–∞–ª–µ–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥—Ä—É–ø–ø—É –≤ —Ä–µ–∂–∏–º —Ç–µ–º. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∫—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –∏ –≤–∫–ª—é—á–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å <code>–¢–µ–º—ã</code>.\n\n" \
                           f"–ü–æ—Å–ª–µ –≤—Å–µ–≥–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /setup_sync_chat."
        elif not self.ready:
            instructions = f"–°—Ç—Ä–∞–Ω–Ω–æ, –≤—Ä–æ–¥–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /restart :)"

        stats = f"""<b><i>–ì—Ä—É–ø–ø–∞ –¥–ª—è FunPay —á–∞—Ç–æ–≤:</i></b> {chat_name or '<code>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</code>'}\n
<b><i>–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ:</i></b> <code>{"‚úÖ –î–∞." if self.ready else "‚ùå –ù–µ—Ç."}</code>\n\n
<b><u>–ß—Ç–æ —Å–µ–π—á–∞—Å –¥–µ–ª–∞—Ç—å?</u></b>
{instructions}"""
        self.tgbot.edit_message_text(stats, c.message.chat.id, c.message.id,
                                     reply_markup=plugin_settings_kb(self, offset), disable_web_page_preview=True)

    def act_add_sync_bot(self, c: telebot.types.CallbackQuery):
        split = c.data.split(":")
        offset = int(split[1])
        if len(self.bots) >= 10:
            self.tgbot.answer_callback_query(c.id, "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –±–æ—Ç–æ–≤.", show_alert=True)
            return
        result = self.tgbot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞.",
                                         reply_markup=skb.CLEAR_STATE_BTN())
        self.tg.set_state(c.message.chat.id, result.id, c.from_user.id, ADD_SYNC_BOT, {"offset": offset})
        self.tgbot.answer_callback_query(c.id)

    def add_sync_bot(self, m: telebot.types.Message):
        offset = self.tg.get_state(m.chat.id, m.from_user.id)["data"]["offset"]
        self.tg.clear_state(m.chat.id, m.from_user.id, True)
        token = m.text
        bot = telebot.TeleBot(token, parse_mode="HTML", allow_sending_without_reply=True)
        try:
            data = bot.get_me()
            username, bot_id = data.username, data.id
        except:
            logger.error(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Telegram –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º $YELLOW{token}$RESET.")
            logger.debug("TRACEBACK", exc_info=True)
            self.tgbot.reply_to(m, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±–æ—Ç–µ.", reply_markup=back_keyboard(offset))
            return

        self.bots.append(bot)
        self.save_bots()
        if not self.current_bot:
            self.current_bot = self.bots[0]
        if not self.ready and len(self.bots) >= MIN_BOTS and self.settings.get("chat_id"):
            self.ready = True
        self.tgbot.reply_to(m, f"‚úÖ Telegram –±–æ—Ç @{username} –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=back_keyboard(offset))
        return

    def delete_sync_bot(self, c: telebot.types.CallbackQuery):
        split = c.data.split(":")
        index, offset = int(split[1]), int(split[2])
        if len(self.bots) < index + 1:
            self.tgbot.edit_message_text(f"‚ùå –ë–æ—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º {index} –Ω–µ –Ω–∞–π–¥–µ–Ω.", c.message.chat.id, c.message.id,
                                         reply_markup=back_keyboard(offset))
            self.tgbot.answer_callback_query(c.id)
            return

        self.bots.pop(index)
        self.current_bot = self.bots[0] if self.bots else None
        if not self.current_bot or len(self.bots) < MIN_BOTS:
            self.ready = False
        self.save_bots()
        c.data = f"{CBT.PLUGIN_SETTINGS}:{UUID}:{offset}"
        self.open_settings_menu(c)

    def setup_sync_chat(self, m: telebot.types.Message):
        if self.settings.get("chat_id"):
            self.tgbot.reply_to(m, "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Funpay —á–∞—Ç–æ–≤?\n\n"
                                   "–ü–∞—Ä—ã <code>Telegram —Ç–æ–ø–∏–∫ - FunPay —á–∞—Ç</code> —Å–±—Ä–æ—Å—è—Ç—Å—è!",
                                reply_markup=setup_chat_keyboard())
            return
        if not m.chat.is_forum:
            self.tgbot.reply_to(m, "‚ùå –ß–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–≤–µ–¥ –≤ —Ä–µ–∂–∏–º —Ç–µ–º!")
            return
        self.settings["chat_id"] = m.chat.id
        self.save_settings()
        self.threads = {}
        self.save_threads()
        if not self.ready and self.current_bot and len(self.bots) >= MIN_BOTS:
            self.ready = True
        self.tgbot.send_message(m.chat.id, "‚úÖ –ì—Ä—É–ø–ø–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ FunPay —á–∞—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

    def confirm_setup_sync_chat(self, c: telebot.types.CallbackQuery):
        if not c.message.chat.is_forum:
            self.tgbot.edit_message_text("‚ùå –ß–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–≤–µ–¥ –≤ —Ä–µ–∂–∏–º —Ç–µ–º!",
                                         c.message.chat.id, c.message.id)
            self.tgbot.answer_callback_query(c.id)
            return
        self.settings["chat_id"] = c.message.chat.id
        self.save_settings()
        self.threads = {}
        self.save_threads()
        if not self.ready and self.current_bot and len(self.bots) >= MIN_BOTS:
            self.ready = True
        self.tgbot.edit_message_text("‚úÖ –ì—Ä—É–ø–ø–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ FunPay —á–∞—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!",
                                     c.message.chat.id, c.message.id)

    def delete_sync_chat(self, m: telebot.types.Message):
        if not self.settings.get('chat_id'):
            self.tgbot.reply_to(m, "‚ùå –ì—Ä—É–ø–ø–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ FunPay —á–∞—Ç–æ–≤ –∏—Ç–∞–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞!")
            return
        self.tgbot.reply_to(m, "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–≤—è–∑–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ FunPay —á–∞—Ç–æ–≤?\n\n"
                               "–ü–∞—Ä—ã <code>Telegram —Ç–æ–ø–∏–∫ - FunPay —á–∞—Ç</code> —Å–±—Ä–æ—Å—è—Ç—Å—è!",
                            reply_markup=delete_chat_keyboard())

    def confirm_delete_sync_chat(self, c: telebot.types.CallbackQuery):
        self.settings["chat_id"] = None
        self.save_settings()
        self.threads = {}
        self.save_threads()
        self.ready = False
        self.tgbot.edit_message_text("‚úÖ –ì—Ä—É–ø–ø–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ FunPay —á–∞—Ç–æ–≤ –æ—Ç–≤—è–∑–∞–Ω–∞.",
                                     c.message.chat.id, c.message.id)

    def sync_chats(self, m: telebot.types.Message):
        if not self.current_bot:
            return
        if self.sync_chats_running:
            self.tgbot.reply_to(m, "‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Ç–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ <i>FPC</i>.")
            return

        self.sync_chats_running = True
        chats = self.cardinal.account.get_chats(update=True)
        for chat in chats:
            obj = chats[chat]
            if str(chat) not in self.threads:
                self.new_synced_chat(obj.id, obj.name)
            time.sleep(BOT_DELAY / len(self.bots))
        self.sync_chats_running = False

    def send_message(self, m: telebot.types.Message):
        split = m.reply_to_message.forum_topic_created.name.split()
        chat_name, chat_id = split[0], split[1]
        chat_id = int(chat_id.replace("(", "").replace(")", ""))
        result = self.cardinal.send_message(chat_id, f"{SPECIAL_SYMBOL}{m.text}", chat_name, watermark=False)
        if not result:
            self.current_bot.reply_to(m, _("msg_sending_error", chat_id, chat_name),
                                      message_thread_id=m.message_thread_id)
            self.swap_curr_bot()

    def watch(self, m: telebot.types.Message):
        if not m.chat.id == self.settings.get("chat_id") or not m.reply_to_message or not m.reply_to_message.forum_topic_created:
            self.tgbot.reply_to(m, "‚ùå –î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–∏–Ω–∫-—á–∞—Ç–æ–≤!")
            return
        tg_chat_name = m.reply_to_message.forum_topic_created.name
        username, chat_id = tg_chat_name.split()
        chat_id = int(chat_id.replace("(", "").replace(")", ""))
        try:
            chat = self.cardinal.account.get_chat(chat_id)
            looking_text = chat.looking_text
            looking_link = chat.looking_link
        except:
            logger.error(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ $YELLOW{username} (CID: {chat_id})$RESET.")
            logger.debug("TRACEBACK", exc_info=True)
            self.current_bot.reply_to(m, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ —Å <a href=\"https://funpay.com/chat/?node={chat_id}\">{username}</a>")
            self.swap_curr_bot()
            return

        if looking_text and looking_link:
            text = f"<b><i>–°–º–æ—Ç—Ä–∏—Ç: </i></b> <a href=\"{looking_link}\">{looking_text}</a>"
        else:
            text = f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{username}</code> –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç.</b>"
        self.current_bot.reply_to(m, text)
        self.swap_curr_bot()

    def watch_handler(self, m: telebot.types.Message):
        Thread(target=self.watch, args=(m,)).start()

    def history(self, m: telebot.types.Message):
        if not m.chat.id == self.settings.get("chat_id") or not m.reply_to_message or not m.reply_to_message.forum_topic_created:
            self.tgbot.reply_to(m, "‚ùå –î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–∏–Ω–∫-—á–∞—Ç–æ–≤!")
            return
        tg_chat_name = m.reply_to_message.forum_topic_created.name
        username, chat_id = tg_chat_name.split()
        chat_id = int(chat_id.replace("(", "").replace(")", ""))
        try:
            history = self.cardinal.account.get_chat_history(chat_id, interlocutor_username=username)
            if not history:
                self.tgbot.reply_to(m, f"‚ùå –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å <a href=\"https://funpay.com/chat/?node={chat_id}\">{username}</a> –ø—É—Å—Ç–∞.")
                return
            history = history[-25:]
        except:
            logger.error(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ $YELLOW{username} (CID: {chat_id})$RESET.")
            logger.debug("TRACEBACK", exc_info=True)
            self.tgbot.reply_to(m, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Å <a href=\"https://funpay.com/chat/?node={chat_id}\">{username}</a>")
            self.swap_curr_bot()
            return

        text = ""
        last_message_author_id = -1
        last_by_bot = False
        last_badge = None
        for i in history:
            message_text = str(i)
            if i.author_id == last_message_author_id and i.by_bot == last_by_bot and i.badge == last_badge:
                author = ""
            elif i.author_id == self.cardinal.account.id:
                author = f"<i><b>ü§ñ {_('you')} (<i>FPC</i>):</b></i> " if i.by_bot else f"<i><b>ü´µ {_('you')}:</b></i> "
                if i.badge:
                    author = f"<i><b>üì¶ {_('you')} ({i.badge}):</b></i> "
            elif i.author_id == 0:
                author = f"<i><b>üîµ {i.author}: </b></i>"
            elif i.badge:
                author = f"<i><b>üÜò {i.author} ({i.badge}): </b></i>"
            elif i.author == i.chat_name:
                author = f"<i><b>üë§ {i.author}: </b></i>"
            else:
                author = f"<i><b>üÜò {i.author} {_('support')}: </b></i>"

            if not i.text:
                msg_text = f"<a href=\"{message_text}\">{_('photo')}</a>"
            elif i.author_id == 0:
                msg_text = f"<b><i>{utils.escape(message_text)}</i></b>"
            else:
                msg_text = utils.escape(message_text)

            text += f"{author}{msg_text}\n\n"
            last_message_author_id = i.author_id
            last_by_bot = i.by_bot
            last_badge = i.badge

        self.tgbot.reply_to(m, text)

    def history_handler(self, m: telebot.types.Message):
        Thread(target=self.history, args=(m,)).start()

    def send_funpay_image(self, m: telebot.types.Message):

        if not self.settings["chat_id"] or m.chat.id != self.settings["chat_id"] or not m.reply_to_message or not m.reply_to_message.forum_topic_created:

            return
        if m.caption is not None:
            m.text = m.caption
            self.send_message (m)
        photo = m.photo[-1]
        if photo.file_size >= 20971520:
            self.tgbot.reply_to(m, "‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20–ú–ë.")
            return

        tg_chat_name = m.reply_to_message.forum_topic_created.name
        username, chat_id = tg_chat_name.split()
        chat_id = int(chat_id.replace("(", "").replace(")", ""))
        try:
            file_info = self.tgbot.get_file(photo.file_id)
            file = self.tgbot.download_file(file_info.file_path)
            while self.settings.get ("can_send_mess", True) == False:
                time.sleep(0.5)
            self.settings["can_send_mess"] = False
            result = self.cardinal.account.send_image(chat_id, file, username, True,
                                                      update_last_saved_message=self.cardinal.old_mode_enabled)
            time.sleep(2)
            self.settings["can_send_mess"] = True
            if not result:
                self.current_bot.reply_to(m, _("msg_sending_error", chat_id, username),
                                          message_thread_id=m.message_thread_id)
                return
        except:
            self.current_bot.reply_to(m, _("msg_sending_error", chat_id, username),
                                      message_thread_id=m.message_thread_id)
            return

    # full history
    def get_full_chat_history(self, chat_id: int, interlocutor_username: str) -> list[FunPayAPI.types.Message]:
        total_history = []
        last_message_id = 999999999999999999999999999999999999999999999999999999999

        while True:
            history = self.cardinal.account.get_chat_history(chat_id, last_message_id, interlocutor_username)
            if not history:
                break
            temp_last_message_id = history[0].id
            if temp_last_message_id == last_message_id:
                break
            last_message_id = temp_last_message_id
            total_history = history + total_history
            time.sleep(0.2)
        return total_history

    def create_chat_history_messages(self, messages: list[FunPayAPI.types.Message]) -> list[str]:
        result = []
        while messages:
            text = ""
            last_message_author_id = -1
            last_by_bot = False
            last_badge = None
            while messages:
                i = messages[0]
                del messages[0]
                message_text = str(i)
                if i.author_id == last_message_author_id and i.by_bot == last_by_bot and i.badge == last_badge:
                    author = ""
                elif i.author_id == self.cardinal.account.id:
                    author = f"<i><b>ü§ñ {_('you')} (<i>FPC</i>):</b></i> " if i.by_bot else f"<i><b>ü´µ {_('you')}:</b></i> "
                    if i.badge:
                        author = f"<i><b>üì¶ {_('you')} ({i.badge}):</b></i> "
                elif i.author_id == 0:
                    author = f"<i><b>üîµ {i.author}: </b></i>"
                elif i.badge:
                    author = f"<i><b>üÜò {i.author} ({i.message.badge}): </b></i>"
                elif i.author == i.chat_name:
                    author = f"<i><b>üë§ {i.author}: </b></i>"
                else:
                    author = f"<i><b>üÜò {i.author} {_('support')}: </b></i>"

                if not i.text:
                    msg_text = f"<a href=\"{message_text}\">{_('photo')}</a>"
                elif i.author_id == 0:
                    msg_text = f"<b><i>{utils.escape(message_text)}</i></b>"
                else:
                    msg_text = utils.escape(message_text)

                text += f"{author}{msg_text}\n\n"
                last_message_author_id = i.author_id
                last_by_bot = i.by_bot
                last_badge = i.badge
                if messages and len(text+str(messages[0])) + 50 > 4096:
                    break
            result.append(text)

        return result

    def full_history(self, m: telebot.types.Message):
        if not m.chat.id == self.settings.get("chat_id") or not m.reply_to_message or not m.reply_to_message.forum_topic_created:
            self.tgbot.reply_to(m, "‚ùå –î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–∏–Ω–∫-—á–∞—Ç–æ–≤!")
            return

        if self.full_history_running:
            self.tgbot.reply_to(m, "‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ <i>FPC</i>.")
            return

        self.full_history_running = True
        tg_chat_name = m.reply_to_message.forum_topic_created.name
        *username, chat_id = tg_chat_name.split()
        chat_id = int(chat_id.replace("(", "").replace(")", ""))

        self.tgbot.reply_to(m, f"–ù–∞—á–∏–Ω–∞—é –∏–∑—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ <a href=\"https://funpay.com/chat/?node={chat_id}\">{username}</a>...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        try:
            history = self.get_full_chat_history(chat_id, username)
            messages = self.create_chat_history_messages(history)
        except:
            self.full_history_running = False
            self.tgbot.reply_to(m, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ <a href=\"https://funpay.com/chat/?node={chat_id}\">{username}</a>.")
            logger.debug("TRACEBACK", exc_info=True)
            return

        for i in messages:
            try:
                self.current_bot.send_message(m.chat.id, i, message_thread_id=m.message_thread_id)
                self.swap_curr_bot()
            except:
                logger.error(f"{LOGGER_PREFIX} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Ç–æ–ø–∏–∫.")
                logger.debug("TRACEBACK", exc_info=True)
            time.sleep(BOT_DELAY / len(self.bots))

        self.full_history_running = False
        self.tgbot.reply_to(m, f"‚úÖ –ì–æ—Ç–æ–≤–æ!")

    def full_history_handler(self, m: telebot.types.Message):
        Thread(target=self.full_history, args=(m,)).start()


def main(c: Cardinal):
    cs = ChatSync(c)
    cs.load()
    cs.replace_handler()
    cs.bind_tg_handlers()


BIND_TO_PRE_INIT = [main]
BIND_TO_DELETE = None
